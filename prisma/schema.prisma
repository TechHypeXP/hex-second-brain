generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model User {
  id                          String                @id @db.Uuid
  email                       String?               @unique @db.VarChar(255)
  batch_jobs                  BatchJob[]
  change_logs                 ChangeLog[]
  content_relationships       ContentRelationship[] @relation("UserToContentRelationship")
  knowledge_edges_created     KnowledgeEdge[]
  learning_analytics          LearningAnalytic[]
  prompt_logs                 PromptLog[]
  resource_versions           ResourceVersion[]
  resources                   Resource[]
  search_queries              SearchQuery[]
  spaces                      Space[]
  user_profile                UserProfile?

  @@map("users")
  @@schema("public")
}

/// Extends the core User model with application-specific data.
model UserProfile {
  id                    String    @id @db.Uuid
  email                 String
  fullName              String?   @map("full_name")
  avatarUrl             String?   @map("avatar_url")
  preferences           Json?     @default("{\"auto_process\": true, \"default_domain\": \"business\", \"embedding_model\": \"gemini\", \"preferred_chunk_size\": 1000, \"notification_settings\": {\"weekly_digest\": true, \"processing_complete\": true}}")
  totalProcessedContent Int?      @default(0) @map("total_processed_content")
  totalEmbeddings       Int?      @default(0) @map("total_embeddings")
  monthlyQuotaUsed      Int?      @default(0) @map("monthly_quota_used")
  lastActiveDate        DateTime? @default(dbgenerated("CURRENT_DATE")) @map("last_active_date") @db.Date
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at            DateTime? @default(now()) @db.Timestamptz(6)
  deletedAt             DateTime? @map("deleted_at") @db.Timestamptz(6)
  user                  User      @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([deletedAt], map: "idx_user_profiles_deleted_at")
  @@index([email], map: "idx_user_profiles_email")
  @@map("user_profiles")
  @@schema("public")
}

/// A user-defined space to organize resources.
model Space {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  description       String?
  color             String?         @default("#3B82F6")
  domain            content_domain? @default(business)
  isDefault         Boolean?        @default(false) @map("is_default")
  contentCount      Int?            @default(0) @map("content_count")
  lastAccessed      DateTime?       @default(now()) @map("last_accessed") @db.Timestamptz(6)
  pineconeNamespace String?         @map("pinecone_namespace")
  user_id           String          @db.Uuid
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?       @default(now()) @db.Timestamptz(6)
  deletedAt         DateTime?       @map("deleted_at") @db.Timestamptz(6)
  resources         Resource[]
  users             User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deletedAt], map: "idx_spaces_deleted_at")
  @@index([domain], map: "idx_spaces_domain")
  @@index([user_id], map: "idx_spaces_user_id")
  @@map("spaces")
  @@schema("public")
}

/// Represents the resources provided by users.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Resource {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                    String
  description              String?
  url                      String?
  type                     resource_type
  content                  String?
  tags                     String[]              @default([])
  domain                   content_domain        @default(business)
  complexity_level         complexity_level?     @default(intermediate)
  estimatedReadTimeMinutes Int?                  @map("estimated_read_time_minutes")
  wordCount                Int?                  @map("word_count")
  language                 String?               @default("en")
  metadata                 Json?                 @default("{}")
  processing_status        processing_status?    @default(pending)
  processedAt              DateTime?             @map("processed_at") @db.Timestamptz(6)
  action_density           action_density?       @default(medium)
  noveltyScore             Int?                  @map("novelty_score")
  practical_applicability  String?
  space_id                 String?               @db.Uuid
  classification_id        String?               @db.Uuid
  user_id                  String                @db.Uuid
  created_at               DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?             @default(now()) @db.Timestamptz(6)
  deletedAt                DateTime?             @map("deleted_at") @db.Timestamptz(6)
  sourceOfRelationships    ContentRelationship[] @relation("SourceResourceToContentRelationship")
  targetOfRelationships    ContentRelationship[] @relation("TargetResourceToContentRelationship")
  contentSummaries         ContentSummary[]
  learningAnalytics        LearningAnalytic[]
  versions                 ResourceVersion[]
  classifications          Classification?       @relation(fields: [classification_id], references: [id], onUpdate: NoAction)
  spaces                   Space?                @relation(fields: [space_id], references: [id], onUpdate: NoAction)
  users                    User                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vectorChunks             VectorChunk[]

  @@index([classification_id], map: "idx_resources_classification_id")
  @@index([deletedAt], map: "idx_resources_deleted_at")
  @@index([domain], map: "idx_resources_domain")
  @@index([processing_status], map: "idx_resources_processing_status")
  @@index([space_id], map: "idx_resources_space_id")
  @@index([tags], map: "idx_resources_tags", type: Gin)
  @@index([type], map: "idx_resources_type")
  @@index([user_id], map: "idx_resources_user_id")
  @@map("resources")
  @@schema("public")
}

/// A version snapshot of a resource's metadata and content.
model ResourceVersion {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  versionNumber Int      @map("version_number")
  title         String
  content       String?
  tags          String[] @default([])
  metadata      Json     @default("{}")
  resourceId    String   @map("resource_id") @db.Uuid
  createdBy     String?  @map("created_by") @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  creator       User?    @relation(fields: [createdBy], references: [id])
  resource      Resource @relation(fields: [resourceId], references: [id])

  @@unique([resourceId, versionNumber])
  @@map("resource_versions")
  @@schema("public")
}

/// Represents the classification of resources.
model Classification {
  id                    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  code                  String           @unique
  description           String?
  parent_id             String?          @db.Uuid
  domain                content_domain?
  usage_count           Int?             @default(0)
  is_system_default     Boolean?         @default(false)
  created_at            DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?        @default(now()) @db.Timestamptz(6)
  deletedAt             DateTime?        @map("deleted_at") @db.Timestamptz(6)
  classifications       Classification?  @relation("classificationsToclassifications", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_classifications Classification[] @relation("classificationsToclassifications")
  resources             Resource[]

  @@index([code], map: "idx_classifications_code")
  @@index([deletedAt], map: "idx_classifications_deleted_at")
  @@map("classifications")
  @@schema("public")
}

/// Summaries generated from the content of a resource.
model ContentSummary {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resourceId        String        @map("resource_id") @db.Uuid
  executiveSummary  String        @map("executive_summary")
  keyInsights       String?       @map("key_insights")
  immediateActions  String?       @map("immediate_actions")
  criticalWarnings  String?       @map("critical_warnings")
  keyMetrics        Json?         @default("{}") @map("key_metrics")
  toolsResources    Json?         @default("{}") @map("tools_resources")
  peopleCompanies   String[]      @map("people_companies")
  primaryKeywords   String[]      @map("primary_keywords")
  semanticTags      String[]      @map("semantic_tags")
  questionBasedTags String[]      @map("question_based_tags")
  totalChunks       Int?          @default(0) @map("total_chunks")
  embeddingModel    String?       @default("gemini") @map("embedding_model")
  avgChunkTokens    Int?          @map("avg_chunk_tokens")
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?     @default(now()) @db.Timestamptz(6)
  deletedAt         DateTime?     @map("deleted_at") @db.Timestamptz(6)
  resource          Resource      @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vectorChunks      VectorChunk[]

  @@index([deletedAt], map: "idx_content_summaries_deleted_at")
  @@index([primaryKeywords], map: "idx_content_summaries_keywords", type: Gin)
  @@index([resourceId], map: "idx_content_summaries_resource_id")
  @@index([semanticTags], map: "idx_content_summaries_semantic_tags", type: Gin)
  @@map("content_summaries")
  @@schema("public")
}

/// Chunks of content vectorized for semantic search.
model VectorChunk {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resourceId         String         @map("resource_id") @db.Uuid
  summaryId          String         @map("summary_id") @db.Uuid
  chunkIndex         Int            @map("chunk_index")
  chunk_type         chunk_type
  content            String
  tokenCount         Int            @map("token_count")
  pineconeId         String?        @unique @map("pinecone_id")
  pineconeNamespace  String?        @map("pinecone_namespace")
  embeddingModel     String?        @default("gemini") @map("embedding_model")
  vector             Unsupported("vector(768)")? // Add this line for pgvector
  vectorDimension    Int?           @default(768) @map("vector_dimension")
  parentChunkId      String?        @map("parent_chunk_id") @db.Uuid
  overlappingChunks  String[]       @map("overlapping_chunks") @db.Uuid
  semanticDensity    Decimal?       @map("semantic_density") @db.Decimal(3, 2)
  retrievalFrequency Int?           @default(0) @map("retrieval_frequency")
  lastRetrieved      DateTime?      @map("last_retrieved") @db.Timestamptz(6)
  created_at         DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?      @default(now()) @db.Timestamptz(6)
  deletedAt          DateTime?      @map("deleted_at") @db.Timestamptz(6)
  parentChunk        VectorChunk?   @relation("ParentChildChunks", fields: [parentChunkId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childChunks        VectorChunk[]  @relation("ParentChildChunks")
  resource           Resource       @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  summary            ContentSummary @relation(fields: [summaryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deletedAt], map: "idx_vector_chunks_deleted_at")
  @@index([pineconeNamespace], map: "idx_vector_chunks_namespace")
  @@index([pineconeId], map: "idx_vector_chunks_pinecone_id")
  @@index([resourceId], map: "idx_vector_chunks_resource_id")
  @@index([retrievalFrequency(sort: Desc)], map: "idx_vector_chunks_retrieval_freq")
  @@index([chunk_type], map: "idx_vector_chunks_type")
  @@map("vector_chunks")
  @@schema("public")
}

/// Defines a relationship between two pieces of content.
model ContentRelationship {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sourceResourceId   String    @map("source_resource_id") @db.Uuid
  targetResourceId   String    @map("target_resource_id") @db.Uuid
  relationship_type  String
  confidenceScore    Decimal?  @default(0.5) @map("confidence_score") @db.Decimal(3, 2)
  relationshipReason String?   @map("relationship_reason")
  isAutoGenerated    Boolean?  @default(true) @map("is_auto_generated")
  createdBy          String?   @map("created_by") @db.Uuid
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  deletedAt          DateTime? @map("deleted_at") @db.Timestamptz(6)
  creator            User?     @relation("UserToContentRelationship", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sourceResource     Resource  @relation("SourceResourceToContentRelationship", fields: [sourceResourceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  targetResource     Resource  @relation("TargetResourceToContentRelationship", fields: [targetResourceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deletedAt], map: "idx_content_relationships_deleted_at")
  @@index([sourceResourceId], map: "idx_relationships_source")
  @@index([targetResourceId], map: "idx_relationships_target")
  @@index([relationship_type], map: "idx_relationships_type")
  @@map("content_relationships")
  @@schema("public")
}

/// Represents an abstract concept or entity within the knowledge graph.
model KnowledgeNode {
  id                   String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  type                 String
  description          String?
  domain               content_domain?
  importanceScore      Int?            @default(1) @map("importance_score")
  mentionFrequency     Int?            @default(1) @map("mention_frequency")
  mentionedInResources String[]        @map("mentioned_in_resources") @db.Uuid
  firstMentionedDate   DateTime?       @default(dbgenerated("CURRENT_DATE")) @map("first_mentioned_date") @db.Date
  lastMentionedDate    DateTime?       @default(dbgenerated("CURRENT_DATE")) @map("last_mentioned_date") @db.Date
  created_at           DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?       @default(now()) @db.Timestamptz(6)
  deletedAt            DateTime?       @map("deleted_at") @db.Timestamptz(6)
  sourceKnowledgeEdges KnowledgeEdge[] @relation("SourceNodeToKnowledgeEdge")
  targetKnowledgeEdges KnowledgeEdge[] @relation("TargetNodeToKnowledgeEdge")

  @@index([deletedAt], map: "idx_knowledge_nodes_deleted_at")
  @@index([domain], map: "idx_knowledge_nodes_domain")
  @@index([importanceScore(sort: Desc)], map: "idx_knowledge_nodes_importance")
  @@index([type], map: "idx_knowledge_nodes_type")
  @@map("knowledge_nodes")
  @@schema("public")
}

/// Defines a relationship between two KnowledgeNodes.
model KnowledgeEdge {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sourceNodeId      String        @map("source_node_id") @db.Uuid
  targetNodeId      String        @map("target_node_id") @db.Uuid
  relationship_type String
  strength          Decimal?      @default(0.5) @db.Decimal(3, 2)
  evidenceResources String[]      @map("evidence_resources") @db.Uuid
  isAutoGenerated   Boolean?      @default(true) @map("is_auto_generated")
  createdBy         String?       @map("created_by") @db.Uuid
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  deletedAt         DateTime?     @map("deleted_at") @db.Timestamptz(6)
  creator           User?         @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sourceNode        KnowledgeNode @relation("SourceNodeToKnowledgeEdge", fields: [sourceNodeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  targetNode        KnowledgeNode @relation("TargetNodeToKnowledgeEdge", fields: [targetNodeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deletedAt], map: "idx_knowledge_edges_deleted_at")
  @@map("knowledge_edges")
  @@schema("public")
}

/// Logs user search queries and their performance.
model SearchQuery {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  query                 String
  queryType             String?           @default("semantic") @map("query_type")
  resultsCount          Int?              @default(0) @map("results_count")
  avgRelevanceScore     Decimal?          @map("avg_relevance_score") @db.Decimal(4, 3)
  clickedResults        String[]          @map("clicked_results") @db.Uuid
  extractedIntent       String?           @map("extracted_intent")
  domain_classification content_domain?
  complexity_detected   complexity_level?
  responseTimeMs        Int?              @map("response_time_ms")
  userSatisfaction      Int?              @map("user_satisfaction")
  userId                String            @map("user_id") @db.Uuid
  created_at            DateTime?         @default(now()) @db.Timestamptz(6)
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)], map: "idx_search_queries_created_at")
  @@index([domain_classification], map: "idx_search_queries_domain")
  @@index([userId], map: "idx_search_queries_user_id")
  @@map("search_queries")
  @@schema("public")
}

/// Tracks user interactions with resources for learning analytics.
model LearningAnalytic {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  resourceId            String?   @map("resource_id") @db.Uuid
  eventType             String    @map("event_type")
  eventDetails          Json?     @default("{}") @map("event_details")
  sessionId             String?   @map("session_id")
  comprehensionLevel    Int?      @map("comprehension_level")
  implementation_status String?
  deviceType            String?   @map("device_type")
  timeSpentSeconds      Int?      @map("time_spent_seconds")
  referralSource        String?   @map("referral_source")
  created_at            DateTime? @default(now()) @db.Timestamptz(6)
  resource              Resource? @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([eventType], map: "idx_learning_analytics_event_type")
  @@index([resourceId], map: "idx_learning_analytics_resource_id")
  @@index([userId], map: "idx_learning_analytics_user_id")
  @@map("learning_analytics")
  @@schema("public")
}

/// Tracks the state and progress of background processing jobs.
model BatchJob {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String         @map("user_id") @db.Uuid
  status     BatchJobStatus
  progress   Int            @default(0)
  totalItems Int            @map("total_items")
  created_at DateTime       @default(now()) @db.Timestamptz(6)
  updated_at DateTime       @default(now()) @db.Timestamptz(6)
  createdAt  DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime       @default(now()) @db.Timestamptz(6)
  user       User           @relation(fields: [userId], references: [id])

  @@map("batch_jobs")
  @@schema("public")
}

/// Logs prompts sent to external AI services for debugging and analysis.
model PromptLog {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  queryText  String        @map("query_text")
  tier       PromptLogTier
  response   Json?
  error      String?
  latencyMs  Int?          @map("latency_ms")
  userId     String?       @map("user_id") @db.Uuid
  created_at DateTime      @default(now()) @db.Timestamptz(6)
  user       User?         @relation(fields: [userId], references: [id])

  @@map("prompt_logs")
  @@schema("public")
}

/// A generic log for tracking important changes in the system.
model ChangeLog {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  changeType    String   @map("change_type")
  changeDetails Json     @default("{}") @map("change_details")
  userId        String?  @map("user_id") @db.Uuid
  changedAt     DateTime @default(now()) @map("changed_at") @db.Timestamptz(6)
  user          User?    @relation(fields: [userId], references: [id])

  @@map("change_log")
  @@schema("public")
}

model ExecutionLog {
  id           String    @id
  taskId       String
  taskName     String
  status       String
  logOutput    String?
  errorMessage String?
  startTime    DateTime  @default(now())
  endTime      DateTime?

  @@schema("public")
}

enum ContentDomain {
  business
  technology

  @@schema("public")
}

enum ResourceType {
  video
  article
  pdf
  onenote

  @@schema("public")
}

enum ComplexityLevel {
  beginner
  intermediate
  advanced

  @@schema("public")
}

enum ProcessingStatus {
  pending
  processing
  completed
  failed

  @@schema("public")
}

enum ActionDensity {
  low
  medium
  high

  @@schema("public")
}

enum ChunkType {
  text
  image
  audio
  video

  @@schema("public")
}

enum PracticalApplicability {
  immediate
  short_term
  long_term

  @@schema("public")
}

enum RelationshipType {
  RELATED
  SEQUEL
  PREQUEL
  SUPPORTS
  CONTRADICTS

  @@schema("public")
}

enum ImplementationStatus {
  not_started @map("not_started")
  in_progress @map("in_progress")
  completed
  abandoned

  @@schema("public")
}

enum BatchJobStatus {
  pending
  processing
  completed
  failed

  @@schema("public")
}

enum PromptLogTier {
  extract
  validate
  rag

  @@schema("public")
}

enum action_density {
  high
  medium
  low
  none

  @@schema("public")
}

enum chunk_type {
  executive_summary
  key_insights
  actions
  warnings
  data
  conclusion
  mixed

  @@schema("public")
}

enum complexity_level {
  beginner
  intermediate
  advanced
  mixed

  @@schema("public")
}

enum content_domain {
  business
  parenting
  health
  productivity
  finance
  technology
  education
  personal

  @@schema("public")
}

enum processing_status {
  pending
  processing
  completed
  failed
  archived

  @@schema("public")
}

enum resource_type {
  youtube
  book
  article
  pdf
  podcast
  tweet
  linkedin
  website
  document

  @@schema("public")
}
