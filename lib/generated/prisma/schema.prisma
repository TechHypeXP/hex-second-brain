// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

//================================================================
//  ENUMS
//  Centralized enumeration types for consistency.
//================================================================

enum ContentDomain {
  business
  technology

  @@schema("public")
}

enum ResourceType {
  video
  article
  pdf
  onenote

  @@schema("public")
}

enum ComplexityLevel {
  beginner
  intermediate
  advanced

  @@schema("public")
}

enum ProcessingStatus {
  pending
  processing
  completed
  failed

  @@schema("public")
}

enum ActionDensity {
  low
  medium
  high

  @@schema("public")
}

enum ChunkType {
  text
  image
  audio
  video

  @@schema("public")
}

enum PracticalApplicability {
  immediate
  short_term @map("short-term")
  long_term  @map("long-term")

  @@schema("public")
}

enum RelationshipType {
  RELATED
  SEQUEL
  PREQUEL
  SUPPORTS
  CONTRADICTS

  @@schema("public")
}

enum ImplementationStatus {
  not_started @map("not_started")
  in_progress @map("in_progress")
  completed
  abandoned

  @@schema("public")
}

enum BatchJobStatus {
  pending
  processing
  completed
  failed

  @@schema("public")
}

enum PromptLogTier {
  extract
  validate
  rag

  @@schema("public")
}

//================================================================
//  CORE AUTH & USER MODELS
//  Models related to user authentication and profiles.
//================================================================

/// Model for Supabase auth.users table
model User {
  id String @id @db.Uuid // Supabase user IDs are UUIDs

  // Relations
  user_profile            UserProfile?
  spaces                  Space[]
  resources               Resource[]
  search_queries          SearchQuery[]
  learning_analytics      LearningAnalytic[]
  content_relationships   ContentRelationship[] @relation("UserToContentRelationship")
  knowledge_edges_created KnowledgeEdge[]
  batch_jobs              BatchJob[]
  prompt_logs             PromptLog[]
  change_logs             ChangeLog[]
  resource_versions       ResourceVersion[]

  @@map("users")
  @@schema("auth")
}

/// Extends the core User model with application-specific data.
model UserProfile {
  id                    String   @id @db.Uuid // Primary key is also FK to auth.users
  email                 String   @unique @db.Text
  fullName              String?  @map("full_name") @db.Text
  avatarUrl             String?  @map("avatar_url") @db.Text
  preferences           Json     @default("{\"auto_process\": true, \"default_domain\": \"business\", \"embedding_model\": \"gemini\", \"preferred_chunk_size\": 1000, \"notification_settings\": {\"weekly_digest\": true, \"processing_complete\": true}}")
  totalProcessedContent Int      @default(0) @map("total_processed_content")
  totalEmbeddings       Int      @default(0) @map("total_embeddings")
  monthlyQuotaUsed      Int      @default(0) @map("monthly_quota_used")
  lastActiveDate        DateTime @default(now()) @map("last_active_date") @db.Date

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  user User @relation(fields: [id], references: [id])

  @@map("user_profiles")
  @@schema("public")
}

//================================================================
//  CONTENT & RESOURCE MANAGEMENT
//  Models for organizing, classifying, and storing content.
//================================================================

/// A user-defined space to organize resources.
model Space {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String        @db.Text
  description       String?       @db.Text
  color             String        @default("#3B82F6") @db.Text
  domain            ContentDomain
  isDefault         Boolean       @default(false) @map("is_default")
  contentCount      Int           @default(0) @map("content_count")
  lastAccessed      DateTime      @default(now()) @map("last_accessed") @db.Timestamptz(6)
  pineconeNamespace String?       @unique @map("pinecone_namespace") @db.Text

  // Foreign Keys
  userId String @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  resources Resource[]

  @@map("spaces")
  @@schema("public")
}

/// Represents the resources provided by users.
model Resource {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String        @db.Text
  description String?       @db.Text
  url         String?       @db.Text
  type        ResourceType
  content     String?       @db.Text
  tags        String[]      @default([])
  domain      ContentDomain
  language    String        @default("en") @db.Text
  metadata    Json          @default("{}")

  // Processing & Analytical Fields
  complexityLevel          ComplexityLevel
  estimatedReadTimeMinutes Int?                    @map("estimated_read_time_minutes")
  wordCount                Int?                    @map("word_count")
  processingStatus         ProcessingStatus
  processedAt              DateTime?               @map("processed_at") @db.Timestamptz(6)
  actionDensity            ActionDensity
  noveltyScore             Int?                    @default(1) @map("novelty_score")
  practicalApplicability   PracticalApplicability?

  // Foreign Keys
  userId           String  @db.Uuid
  spaceId          String? @db.Uuid
  classificationId String? @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  user                  User                  @relation(fields: [userId], references: [id])
  space                 Space?                @relation(fields: [spaceId], references: [id])
  classification        Classification?       @relation(fields: [classificationId], references: [id])
  contentSummaries      ContentSummary[]
  vectorChunks          VectorChunk[]
  sourceOfRelationships ContentRelationship[] @relation("SourceResourceToContentRelationship")
  targetOfRelationships ContentRelationship[] @relation("TargetResourceToContentRelationship")
  learningAnalytics     LearningAnalytic[]
  versions              ResourceVersion[]

  @@map("resources")
  @@schema("public")
}

/// A version snapshot of a resource's metadata and content.
model ResourceVersion {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  versionNumber Int      @map("version_number")
  title         String   @db.Text
  content       String?  @db.Text
  tags          String[] @default([])
  metadata      Json     @default("{}")

  // Foreign Keys
  resourceId String  @map("resource_id") @db.Uuid
  createdBy  String? @map("created_by") @db.Uuid

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  // Note: Versions are typically not soft-deleted themselves, they are part of the audit trail.

  // Relations
  resource Resource @relation(fields: [resourceId], references: [id])
  creator  User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@unique([resourceId, versionNumber])
  @@map("resource_versions")
  @@schema("public")
}

/// Represents the classification of resources.
model Classification {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String        @db.Text
  code            String        @unique @db.Text
  description     String?       @db.Text
  domain          ContentDomain
  usageCount      Int           @default(0)
  isSystemDefault Boolean       @default(false)
  parentId        String?       @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  parent    Classification?  @relation("ClassificationToParent", fields: [parentId], references: [id])
  children  Classification[] @relation("ClassificationToParent")
  resources Resource[]

  @@map("classifications")
  @@schema("public")
}

//================================================================
//  AI, VECTOR SEARCH & KNOWLEDGE GRAPH
//  Models for summarization, embeddings, and content relationships.
//================================================================

/// Summaries generated from the content of a resource.
model ContentSummary {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  executiveSummary  String   @map("executive_summary") @db.Text
  keyInsights       String?  @map("key_insights") @db.Text
  immediateActions  String?  @map("immediate_actions") @db.Text
  criticalWarnings  String?  @map("critical_warnings") @db.Text
  keyMetrics        Json     @default("{}") @map("key_metrics")
  toolsResources    Json     @default("{}") @map("tools_resources")
  peopleCompanies   String[] @default([]) @map("people_companies")
  primaryKeywords   String[] @default([]) @map("primary_keywords")
  semanticTags      String[] @default([]) @map("semantic_tags")
  questionBasedTags String[] @default([]) @map("question_based_tags")
  totalChunks       Int      @default(0) @map("total_chunks")
  embeddingModel    String   @default("gemini") @map("embedding_model") @db.Text
  avgChunkTokens    Int?     @map("avg_chunk_tokens")

  // Foreign Keys
  resourceId String @map("resource_id") @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  resource     Resource      @relation(fields: [resourceId], references: [id])
  vectorChunks VectorChunk[]

  @@map("content_summaries")
  @@schema("public")
}

/// Chunks of content vectorized for semantic search.
model VectorChunk {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chunkIndex         Int       @map("chunk_index")
  chunkType          ChunkType
  content            String    @db.Text
  tokenCount         Int       @map("token_count")
  pineconeId         String?   @unique @map("pinecone_id") @db.Text
  pineconeNamespace  String?   @map("pinecone_namespace") @db.Text
  embeddingModel     String    @default("gemini") @map("embedding_model") @db.Text
  vectorDimension    Int       @default(768) @map("vector_dimension")
  overlappingChunks  String[]  @default([]) @map("overlapping_chunks")
  semanticDensity    Decimal?  @map("semantic_density") @db.Decimal(65, 30)
  retrievalFrequency Int       @default(0) @map("retrieval_frequency")
  lastRetrieved      DateTime? @map("last_retrieved") @db.Timestamptz(6)

  // Foreign Keys
  resourceId    String  @map("resource_id") @db.Uuid
  summaryId     String  @map("summary_id") @db.Uuid
  parentChunkId String? @map("parent_chunk_id") @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  resource    Resource       @relation(fields: [resourceId], references: [id])
  summary     ContentSummary @relation(fields: [summaryId], references: [id])
  parentChunk VectorChunk?   @relation("ParentChildChunks", fields: [parentChunkId], references: [id])
  childChunks VectorChunk[]  @relation("ParentChildChunks")

  @@map("vector_chunks")
  @@schema("public")
}

/// Defines a relationship between two pieces of content.
model ContentRelationship {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  relationshipType   RelationshipType
  confidenceScore    Decimal          @default(0.5) @map("confidence_score") @db.Decimal(65, 30)
  relationshipReason String?          @map("relationship_reason") @db.Text
  isAutoGenerated    Boolean          @default(true) @map("is_auto_generated")

  // Foreign Keys
  sourceResourceId String  @map("source_resource_id") @db.Uuid
  targetResourceId String  @map("target_resource_id") @db.Uuid
  createdBy        String? @map("created_by") @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  sourceResource Resource @relation("SourceResourceToContentRelationship", fields: [sourceResourceId], references: [id])
  targetResource Resource @relation("TargetResourceToContentRelationship", fields: [targetResourceId], references: [id])
  creator        User?    @relation("UserToContentRelationship", fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("content_relationships")
  @@schema("public")
}

/// Represents an abstract concept or entity within the knowledge graph.
model KnowledgeNode {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String         @unique @db.Text
  type                 String         @db.Text // e.g., "Person", "Concept", "Company"
  description          String?        @db.Text
  domain               ContentDomain?
  importanceScore      Int            @default(1) @map("importance_score")
  mentionFrequency     Int            @default(1) @map("mention_frequency")
  mentionedInResources String[]       @default([]) @map("mentioned_in_resources")
  firstMentionedDate   DateTime       @default(now()) @map("first_mentioned_date") @db.Date
  lastMentionedDate    DateTime       @default(now()) @map("last_mentioned_date") @db.Date

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  sourceKnowledgeEdges KnowledgeEdge[] @relation("SourceNodeToKnowledgeEdge")
  targetKnowledgeEdges KnowledgeEdge[] @relation("TargetNodeToKnowledgeEdge")

  @@map("knowledge_nodes")
  @@schema("public")
}

/// Defines a relationship between two KnowledgeNodes.
model KnowledgeEdge {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  relationshipType  RelationshipType
  strength          Decimal          @default(0.5) @db.Decimal(65, 30)
  evidenceResources String[]         @default([]) @map("evidence_resources")
  isAutoGenerated   Boolean          @default(true) @map("is_auto_generated")

  // Foreign Keys
  sourceNodeId String  @map("source_node_id") @db.Uuid
  targetNodeId String  @map("target_node_id") @db.Uuid
  createdBy    String? @map("created_by") @db.Uuid

  // Timestamps
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6) // Soft delete flag

  // Relations
  sourceNode KnowledgeNode @relation("SourceNodeToKnowledgeEdge", fields: [sourceNodeId], references: [id])
  targetNode KnowledgeNode @relation("TargetNodeToKnowledgeEdge", fields: [targetNodeId], references: [id])
  creator    User?         @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("knowledge_edges")
  @@schema("public")
}

//================================================================
//  ANALYTICS & USER ACTIVITY
//  Models for tracking user interactions and search behavior.
//================================================================

/// Logs user search queries and their performance.
model SearchQuery {
  id                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  query                String           @db.Text
  queryType            String           @default("semantic") @map("query_type") @db.Text
  resultsCount         Int              @default(0) @map("results_count")
  avgRelevanceScore    Decimal?         @map("avg_relevance_score") @db.Decimal(65, 30)
  clickedResults       String[]         @default([]) @map("clicked_results")
  extractedIntent      String?          @map("extracted_intent") @db.Text
  domainClassification ContentDomain?
  complexityDetected   ComplexityLevel?
  responseTimeMs       Int?             @map("response_time_ms")
  userSatisfaction     Int?             @map("user_satisfaction")

  // Foreign Keys
  userId String @map("user_id") @db.Uuid

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  // Note: Search queries are typically not soft-deleted as they are immutable log entries.

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("search_queries")
  @@schema("public")
}

/// Tracks user interactions with resources for learning analytics.
model LearningAnalytic {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventType            String                @map("event_type") @db.Text // e.g., "view", "summarize", "ask_question"
  eventDetails         Json                  @default("{}") @map("event_details")
  sessionId            String?               @map("session_id") @db.Text
  comprehensionLevel   Int?                  @map("comprehension_level")
  implementationStatus ImplementationStatus?
  deviceType           String?               @map("device_type") @db.Text
  timeSpentSeconds     Int?                  @map("time_spent_seconds")
  referralSource       String?               @map("referral_source") @db.Text

  // Foreign Keys
  userId     String  @map("user_id") @db.Uuid
  resourceId String? @map("resource_id") @db.Uuid

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  // Note: Analytics are typically not soft-deleted as they are immutable log entries.

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  resource Resource? @relation(fields: [resourceId], references: [id])

  @@map("learning_analytics")
  @@schema("public")
}

//================================================================
//  OPERATIONAL & SYSTEM LOGS
//  Models for system jobs, logs, and auditing.
//================================================================

/// Tracks the state and progress of background processing jobs.
model BatchJob {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status     BatchJobStatus
  progress   Int            @default(0)
  totalItems Int            @map("total_items")

  // Foreign Keys
  userId String @map("user_id") @db.Uuid

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  // Note: Jobs might be archived differently, but a soft delete is reasonable if needed.

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("batch_jobs")
  @@schema("public")
}

/// Logs prompts sent to external AI services for debugging and analysis.
model PromptLog {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  queryText String        @map("query_text") @db.Text
  tier      PromptLogTier
  response  Json?
  error     String?       @db.Text
  latencyMs Int?          @map("latency_ms")

  // Foreign Keys
  userId String? @map("user_id") @db.Uuid // Can be null for system prompts

  // Timestamps
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("prompt_logs")
  @@schema("public")
}

/// A generic log for tracking important changes in the system.
model ChangeLog {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  changeType    String @map("change_type") @db.Text // e.g., "USER_UPDATE", "RESOURCE_DELETE"
  changeDetails Json   @default("{}") @map("change_details")

  // Foreign Keys
  userId String? @map("user_id") @db.Uuid // Can be null for system changes

  // Timestamps
  changedAt DateTime @default(now()) @map("changed_at") @db.Timestamptz(6)

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("change_log")
  @@schema("public")
}
